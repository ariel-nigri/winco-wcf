<?php

require_once dirname(dirname(__DIR__))."/common/wcf.php";
$db_conn = getDbConn();

$default_ver = 'v1001';

ini_set('include_path', ini_get('include_path').":/home/instances/versions/{$default_ver}/common");

require_once "wnc_session.php";
require_once "cloud/cloud_login.php";
require_once "wc/interface.php";

// Access control through referer
$ref = $_SERVER['HTTP_REFERER'];

// crack referer into protocol, host and document
$url_parts = explode('/', $ref);
if (($url_parts[0] != 'http:' && $url_parts[0] != 'https:')
        || $url_parts[1] != '')
    die('INVALID REFERER');
if (!in_array($url_parts[2], $cloud_connect_allowed_sites))
    die('ACCESS DENIED');
$usu_privs = '';
$ae = new AuthEvents;
if (empty($_REQUEST['login_type']) || empty($_REQUEST['username']) || empty($_REQUEST['password']) || ($_REQUEST['login_type'] == "support_id" && empty($_REQUEST['inst_id']))) {
    $login_result = "INVALID_PARAMS";
} else {
	do {
		$login_result = "LOGIN_INVALID";

		$usu_inst = null;
		$usu_privs = 'A';
		$pass_ok = false;	  	

		if ($_REQUEST['login_type'] == "support_id") {
			$instances = new Instances;
			$instances->inst_id = $_REQUEST['inst_id'];
			if (!$instances->select($db_conn))
                $instances = null;	
		} else {	
			// so we have to check in the users table...
			$usu_inst = new UsersInstances;
			$usu_inst->usu_email = $_REQUEST['username'];
			if ($usu_inst->select($db_conn)) {
				$ae->usu_seq = $usu_inst->usu_seq;
				if ($ae->isBlocked($db_conn)) {
					// Rafael
						if ($ae->blockedReason($db_conn) == 'EXPIRED')
							$login_result = 'LOGIN_EXPIRED';
						else
							$login_result = 'LOGIN_BLOCKED';
					// End Rafael
					// Antes da alteração
						// $login_result = 'LOGIN_BLOCKED';
					break;
				}
				$password_change = $ae->isPasswordChange($db_conn);
				$usu_privs = $usu_inst->usuinst_privs;
				$lang = $usu_inst->usu_language;
				$usu_privs_groups = $usu_inst->usuinst_privs_groups;
				$master = $usu_inst->usuinst_master;
				// $passwd_age = $usu_inst->
							
				$instances = new Instances;
				$instances->inst_seq = $usu_inst->inst_seq;			
				if ($instances->select($db_conn))
                    $pass_ok = Users::comparePassword($_REQUEST['password'], $usu_inst->usu_passwd_digest);
			}
		}	
			
		// if (!$instances && $product_code == 'WTM') {
		// 	// WE MUST DEPRECATE USING THE PASSWORD IN THE INSTANCE TABLE, BUT WTM has this setup.
		// 	$instances = new WTM_Instances;
		// 	$instances->inst_email = $_REQUEST['username'];
		// 	if ($instances->select($db_conn)) {
		// 		$pass_ok = $instances->validatePassword($_REQUEST['password']);
		// 		$lang = $instances->inst_lang;
		// 	} else
		// 		break;
		// 		// $instances = null;
		// }
		if ($instances->valid) {
			if ($_REQUEST['login_type'] == 'user' && $pass_ok) {
				// LOGIN OK, WE MUST CREATE THE LOGIN SESSION NOW.
                $login_result = cloud_login($instances, $usu_inst);

			} else if ($_REQUEST['login_type'] == 'support') {
				$usu_privs = 'C'; // configure but no report access or audio access
				$wc = new WcConnection();
				$resp = null;
				if ($wc->connect('127.0.0.1', 'administrador', $_REQUEST['password'], 9033, $resp)) {
					// LOGIN OK, WE MUST CREATE THE LOGIN SESSION NOW.
					$login_result = cloud_login($instances);
				}
			} else if ($_REQUEST['login_type'] == 'support_id') {
				$usu_privs = 'C'; // configure but no report access or audio access
				$wc = new WcConnection();
                $resp = null;
				if ($wc->connect('127.0.0.1', $_REQUEST['username'], $_REQUEST['password'], 9033, $resp)) {                
					// check if user is in $LOGIN_INSTANCE$ group
					$grp_ok = false;
					$usr['_PARAM_ID'] = "STRING_PARAM";
					$usr['VALUE'] = $_REQUEST['username'];				
					if ($wc->exec("USERDB:GET_USER", $usr, $respUsr)) {			
						foreach ($respUsr['AD_GROUPS'] as $idx => $grp) {
							if ($grp['VALUE'] == '$LOGIN_INSTANCE$') {
								$grp_ok = true;
								break;
							}
						}					
					}	
					
					if ($grp_ok) {
						// LOGIN OK, WE MUST CREATE THE LOGIN SESSION NOW.
						$login_result = cloud_login($instances);
					} else {
						$login_result = 'ACCESS_DENIED';
					}
				} 
			}
		}
	} while (false);
}
$ae->clear();
if ($login_result == "OK") {
	if ($_REQUEST['login_type'] != "support_id") {
		$ae->usu_seq = $usu_inst->usu_seq;
		$ae->clearEvents($db_conn, AuthEvents::BAD_LOGIN_EVENT);
	}
    if ($usu_privs == 'A')
        foreach ($product_all_privs as $p)
            $_SESSION[$p] = true;
    else {
        for ($i = 0; $i < strlen($usu_privs); $i++)
            $_SESSION[$product_all_privs[$usu_privs{$i}]] = true;
	}
	if ($password_change) {
		$ae->clear();
		$ae->usu_seq = $usu_inst->usu_seq;
		$ae->clearEvents($db_conn, AuthEvents::CHANGE_PASSWD_NEXT_LOGIN);
		$ae->addEvent($db_conn, AuthEvents::BLOCK_LOGIN_EVENT);
		$_SESSION['AUTH']['PASSWORD_CHANGE'] = true;
	}
} else if ($login_result == 'ACCESS_DENIED' || $login_result == 'LOGIN_INVALID') {
	// print_r($ae);exit;
	$ae->usu_seq = $usu_inst->usu_seq;
	$ae->addBadLogin($db_conn);
}

if ($_REQUEST['login_type'] == "support" || $_REQUEST['login_type'] == "support_id")
	$email = "SYSOP:".$_REQUEST['username'];
else
	$email = $_REQUEST['username'];
if (!empty($instances)) {
    $name = $instances->inst_name;
    $frontend = $instances->worker_frontend;
    $token = session_id();
	$_SESSION['LANGUAGE'] = $lang;
	$_SESSION['MASTER_USER'] = $master;
	$inst_id = $instances->inst_id;
	if ($product_code == 'WTM')
		$_SESSION['WTM_LOGGED_USER'] = $email;
	$_SESSION['LOGGED_IN_USER'] = $email;
	
	if (!empty($usu_privs_groups))
		$_SESSION['ADMIN_PRIV_GROUPS'] = explode(",", $usu_privs_groups);
} else
	$name = $frontend = $token = '';

//if usu_max_pwd_age == 0 means the password doesn't expire.
if (isset($usu_inst->usu_updated_passwd_at) && $login_result == "OK" && $usu_inst->usu_max_pwd_age > 0) {
	$dt = new DateTime($usu_inst->usu_updated_passwd_at);
	$dt->setTime(0, 0, 0);
	$dt->modify('+'.$usu_inst->usu_max_pwd_age.' days');
	$now = new DateTime();
	$now->setTime(0, 0, 0);
	$diff = date_diff($now, $dt);
	if ($diff->invert == 1)
		$days_remaining = $diff->days * -1;
	else
		$days_remaining = $diff->days;
	if ($days_remaining <= 0) {
		//If 0 the use can connect and should change his password immediataly
		//If less than 0, user can't connect. (BLOCK_LOGIN_EVENT)
		$ae->clear();
		$ae->usu_seq = $usu_inst->usu_seq;
		$ae->ae_datetime = $dt->format('Y-m-d H:i:s');
		$ae->addEvent($db_conn, AuthEvents::BLOCK_LOGIN_EVENT, 'EXPIRED');
		if ($days_remaining < 0) {
			$login_result = 'ACCESS_DENIED';
			$name = $frontend = $token = '';
		}
	}
	$_SESSION['AUTH']['CHANGE_PASSWD_DAYS'] = $days_remaining;
}


$result = new stdclass;
$result->login_result = $login_result;
$result->username = $email;
$result->account_name = $name;
$result->session_token = $token;
$result->hostname = $frontend;
@$result->currdir = $_SESSION['WC_DIR'];
$result->inst_id = $inst_id;

echo json_encode($result);
